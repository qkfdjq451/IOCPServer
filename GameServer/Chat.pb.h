// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
namespace Protocol {
class C_CHATMESSAGE;
struct C_CHATMESSAGEDefaultTypeInternal;
extern C_CHATMESSAGEDefaultTypeInternal _C_CHATMESSAGE_default_instance_;
class C_CHAT_CREATE_ROOM_MESSAGE;
struct C_CHAT_CREATE_ROOM_MESSAGEDefaultTypeInternal;
extern C_CHAT_CREATE_ROOM_MESSAGEDefaultTypeInternal _C_CHAT_CREATE_ROOM_MESSAGE_default_instance_;
class C_CHAT_JOIN_ROOM_MESSAGE;
struct C_CHAT_JOIN_ROOM_MESSAGEDefaultTypeInternal;
extern C_CHAT_JOIN_ROOM_MESSAGEDefaultTypeInternal _C_CHAT_JOIN_ROOM_MESSAGE_default_instance_;
class C_CHAT_REQUEST_ROOM_LIST_MESSAGE;
struct C_CHAT_REQUEST_ROOM_LIST_MESSAGEDefaultTypeInternal;
extern C_CHAT_REQUEST_ROOM_LIST_MESSAGEDefaultTypeInternal _C_CHAT_REQUEST_ROOM_LIST_MESSAGE_default_instance_;
class S_CHATMESSAGE;
struct S_CHATMESSAGEDefaultTypeInternal;
extern S_CHATMESSAGEDefaultTypeInternal _S_CHATMESSAGE_default_instance_;
class S_CHAT_CREATE_ROOM_RESULT_MESSAGE;
struct S_CHAT_CREATE_ROOM_RESULT_MESSAGEDefaultTypeInternal;
extern S_CHAT_CREATE_ROOM_RESULT_MESSAGEDefaultTypeInternal _S_CHAT_CREATE_ROOM_RESULT_MESSAGE_default_instance_;
class S_CHAT_JOIN_ROOM_RESULT_MESSAGE;
struct S_CHAT_JOIN_ROOM_RESULT_MESSAGEDefaultTypeInternal;
extern S_CHAT_JOIN_ROOM_RESULT_MESSAGEDefaultTypeInternal _S_CHAT_JOIN_ROOM_RESULT_MESSAGE_default_instance_;
class S_CHAT_RESPONSE_ROOM_LIST_MESSAGE;
struct S_CHAT_RESPONSE_ROOM_LIST_MESSAGEDefaultTypeInternal;
extern S_CHAT_RESPONSE_ROOM_LIST_MESSAGEDefaultTypeInternal _S_CHAT_RESPONSE_ROOM_LIST_MESSAGE_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CHATMESSAGE* Arena::CreateMaybeMessage<::Protocol::C_CHATMESSAGE>(Arena*);
template<> ::Protocol::C_CHAT_CREATE_ROOM_MESSAGE* Arena::CreateMaybeMessage<::Protocol::C_CHAT_CREATE_ROOM_MESSAGE>(Arena*);
template<> ::Protocol::C_CHAT_JOIN_ROOM_MESSAGE* Arena::CreateMaybeMessage<::Protocol::C_CHAT_JOIN_ROOM_MESSAGE>(Arena*);
template<> ::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE* Arena::CreateMaybeMessage<::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE>(Arena*);
template<> ::Protocol::S_CHATMESSAGE* Arena::CreateMaybeMessage<::Protocol::S_CHATMESSAGE>(Arena*);
template<> ::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE* Arena::CreateMaybeMessage<::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE>(Arena*);
template<> ::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE* Arena::CreateMaybeMessage<::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE>(Arena*);
template<> ::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* Arena::CreateMaybeMessage<::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ChatCreateRoomResult : int {
  ChatCreateRoomResult_Success = 0,
  ChatCreateRoomResult_Fail_Already_Exist_Name_In_Rooms = 1,
  ChatCreateRoomResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChatCreateRoomResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChatCreateRoomResult_IsValid(int value);
constexpr ChatCreateRoomResult ChatCreateRoomResult_MIN = ChatCreateRoomResult_Success;
constexpr ChatCreateRoomResult ChatCreateRoomResult_MAX = ChatCreateRoomResult_Fail_Already_Exist_Name_In_Rooms;
constexpr int ChatCreateRoomResult_ARRAYSIZE = ChatCreateRoomResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatCreateRoomResult_descriptor();
template<typename T>
inline const std::string& ChatCreateRoomResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatCreateRoomResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatCreateRoomResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatCreateRoomResult_descriptor(), enum_t_value);
}
inline bool ChatCreateRoomResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatCreateRoomResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatCreateRoomResult>(
    ChatCreateRoomResult_descriptor(), name, value);
}
enum ChatJoinRoomResult : int {
  ChatJoinRoomResult_Success = 0,
  ChatJoinRoomResult_Fail_Is_Not_Exist_Room = 1,
  ChatJoinRoomResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChatJoinRoomResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChatJoinRoomResult_IsValid(int value);
constexpr ChatJoinRoomResult ChatJoinRoomResult_MIN = ChatJoinRoomResult_Success;
constexpr ChatJoinRoomResult ChatJoinRoomResult_MAX = ChatJoinRoomResult_Fail_Is_Not_Exist_Room;
constexpr int ChatJoinRoomResult_ARRAYSIZE = ChatJoinRoomResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatJoinRoomResult_descriptor();
template<typename T>
inline const std::string& ChatJoinRoomResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatJoinRoomResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatJoinRoomResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatJoinRoomResult_descriptor(), enum_t_value);
}
inline bool ChatJoinRoomResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatJoinRoomResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatJoinRoomResult>(
    ChatJoinRoomResult_descriptor(), name, value);
}
// ===================================================================

class C_CHAT_CREATE_ROOM_MESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT_CREATE_ROOM_MESSAGE) */ {
 public:
  inline C_CHAT_CREATE_ROOM_MESSAGE() : C_CHAT_CREATE_ROOM_MESSAGE(nullptr) {}
  ~C_CHAT_CREATE_ROOM_MESSAGE() override;
  explicit constexpr C_CHAT_CREATE_ROOM_MESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT_CREATE_ROOM_MESSAGE(const C_CHAT_CREATE_ROOM_MESSAGE& from);
  C_CHAT_CREATE_ROOM_MESSAGE(C_CHAT_CREATE_ROOM_MESSAGE&& from) noexcept
    : C_CHAT_CREATE_ROOM_MESSAGE() {
    *this = ::std::move(from);
  }

  inline C_CHAT_CREATE_ROOM_MESSAGE& operator=(const C_CHAT_CREATE_ROOM_MESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT_CREATE_ROOM_MESSAGE& operator=(C_CHAT_CREATE_ROOM_MESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT_CREATE_ROOM_MESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT_CREATE_ROOM_MESSAGE* internal_default_instance() {
    return reinterpret_cast<const C_CHAT_CREATE_ROOM_MESSAGE*>(
               &_C_CHAT_CREATE_ROOM_MESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CHAT_CREATE_ROOM_MESSAGE& a, C_CHAT_CREATE_ROOM_MESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT_CREATE_ROOM_MESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT_CREATE_ROOM_MESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT_CREATE_ROOM_MESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT_CREATE_ROOM_MESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT_CREATE_ROOM_MESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHAT_CREATE_ROOM_MESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT_CREATE_ROOM_MESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT_CREATE_ROOM_MESSAGE";
  }
  protected:
  explicit C_CHAT_CREATE_ROOM_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT_CREATE_ROOM_RESULT_MESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE) */ {
 public:
  inline S_CHAT_CREATE_ROOM_RESULT_MESSAGE() : S_CHAT_CREATE_ROOM_RESULT_MESSAGE(nullptr) {}
  ~S_CHAT_CREATE_ROOM_RESULT_MESSAGE() override;
  explicit constexpr S_CHAT_CREATE_ROOM_RESULT_MESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT_CREATE_ROOM_RESULT_MESSAGE(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from);
  S_CHAT_CREATE_ROOM_RESULT_MESSAGE(S_CHAT_CREATE_ROOM_RESULT_MESSAGE&& from) noexcept
    : S_CHAT_CREATE_ROOM_RESULT_MESSAGE() {
    *this = ::std::move(from);
  }

  inline S_CHAT_CREATE_ROOM_RESULT_MESSAGE& operator=(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT_CREATE_ROOM_RESULT_MESSAGE& operator=(S_CHAT_CREATE_ROOM_RESULT_MESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT_CREATE_ROOM_RESULT_MESSAGE* internal_default_instance() {
    return reinterpret_cast<const S_CHAT_CREATE_ROOM_RESULT_MESSAGE*>(
               &_S_CHAT_CREATE_ROOM_RESULT_MESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_CHAT_CREATE_ROOM_RESULT_MESSAGE& a, S_CHAT_CREATE_ROOM_RESULT_MESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT_CREATE_ROOM_RESULT_MESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT_CREATE_ROOM_RESULT_MESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT_CREATE_ROOM_RESULT_MESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT_CREATE_ROOM_RESULT_MESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT_CREATE_ROOM_RESULT_MESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE";
  }
  protected:
  explicit S_CHAT_CREATE_ROOM_RESULT_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 2,
    kChatCreateRoomResultFieldNumber = 1,
  };
  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // .Protocol.ChatCreateRoomResult chatCreateRoomResult = 1;
  void clear_chatcreateroomresult();
  ::Protocol::ChatCreateRoomResult chatcreateroomresult() const;
  void set_chatcreateroomresult(::Protocol::ChatCreateRoomResult value);
  private:
  ::Protocol::ChatCreateRoomResult _internal_chatcreateroomresult() const;
  void _internal_set_chatcreateroomresult(::Protocol::ChatCreateRoomResult value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  int chatcreateroomresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT_JOIN_ROOM_MESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT_JOIN_ROOM_MESSAGE) */ {
 public:
  inline C_CHAT_JOIN_ROOM_MESSAGE() : C_CHAT_JOIN_ROOM_MESSAGE(nullptr) {}
  ~C_CHAT_JOIN_ROOM_MESSAGE() override;
  explicit constexpr C_CHAT_JOIN_ROOM_MESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT_JOIN_ROOM_MESSAGE(const C_CHAT_JOIN_ROOM_MESSAGE& from);
  C_CHAT_JOIN_ROOM_MESSAGE(C_CHAT_JOIN_ROOM_MESSAGE&& from) noexcept
    : C_CHAT_JOIN_ROOM_MESSAGE() {
    *this = ::std::move(from);
  }

  inline C_CHAT_JOIN_ROOM_MESSAGE& operator=(const C_CHAT_JOIN_ROOM_MESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT_JOIN_ROOM_MESSAGE& operator=(C_CHAT_JOIN_ROOM_MESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT_JOIN_ROOM_MESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT_JOIN_ROOM_MESSAGE* internal_default_instance() {
    return reinterpret_cast<const C_CHAT_JOIN_ROOM_MESSAGE*>(
               &_C_CHAT_JOIN_ROOM_MESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CHAT_JOIN_ROOM_MESSAGE& a, C_CHAT_JOIN_ROOM_MESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT_JOIN_ROOM_MESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT_JOIN_ROOM_MESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT_JOIN_ROOM_MESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT_JOIN_ROOM_MESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT_JOIN_ROOM_MESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHAT_JOIN_ROOM_MESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT_JOIN_ROOM_MESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT_JOIN_ROOM_MESSAGE";
  }
  protected:
  explicit C_CHAT_JOIN_ROOM_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT_JOIN_ROOM_RESULT_MESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE) */ {
 public:
  inline S_CHAT_JOIN_ROOM_RESULT_MESSAGE() : S_CHAT_JOIN_ROOM_RESULT_MESSAGE(nullptr) {}
  ~S_CHAT_JOIN_ROOM_RESULT_MESSAGE() override;
  explicit constexpr S_CHAT_JOIN_ROOM_RESULT_MESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT_JOIN_ROOM_RESULT_MESSAGE(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from);
  S_CHAT_JOIN_ROOM_RESULT_MESSAGE(S_CHAT_JOIN_ROOM_RESULT_MESSAGE&& from) noexcept
    : S_CHAT_JOIN_ROOM_RESULT_MESSAGE() {
    *this = ::std::move(from);
  }

  inline S_CHAT_JOIN_ROOM_RESULT_MESSAGE& operator=(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT_JOIN_ROOM_RESULT_MESSAGE& operator=(S_CHAT_JOIN_ROOM_RESULT_MESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT_JOIN_ROOM_RESULT_MESSAGE* internal_default_instance() {
    return reinterpret_cast<const S_CHAT_JOIN_ROOM_RESULT_MESSAGE*>(
               &_S_CHAT_JOIN_ROOM_RESULT_MESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CHAT_JOIN_ROOM_RESULT_MESSAGE& a, S_CHAT_JOIN_ROOM_RESULT_MESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT_JOIN_ROOM_RESULT_MESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT_JOIN_ROOM_RESULT_MESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT_JOIN_ROOM_RESULT_MESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT_JOIN_ROOM_RESULT_MESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT_JOIN_ROOM_RESULT_MESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE";
  }
  protected:
  explicit S_CHAT_JOIN_ROOM_RESULT_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatJoinRoomResultFieldNumber = 1,
  };
  // .Protocol.ChatJoinRoomResult chatJoinRoomResult = 1;
  void clear_chatjoinroomresult();
  ::Protocol::ChatJoinRoomResult chatjoinroomresult() const;
  void set_chatjoinroomresult(::Protocol::ChatJoinRoomResult value);
  private:
  ::Protocol::ChatJoinRoomResult _internal_chatjoinroomresult() const;
  void _internal_set_chatjoinroomresult(::Protocol::ChatJoinRoomResult value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int chatjoinroomresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT_REQUEST_ROOM_LIST_MESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT_REQUEST_ROOM_LIST_MESSAGE) */ {
 public:
  inline C_CHAT_REQUEST_ROOM_LIST_MESSAGE() : C_CHAT_REQUEST_ROOM_LIST_MESSAGE(nullptr) {}
  explicit constexpr C_CHAT_REQUEST_ROOM_LIST_MESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT_REQUEST_ROOM_LIST_MESSAGE(const C_CHAT_REQUEST_ROOM_LIST_MESSAGE& from);
  C_CHAT_REQUEST_ROOM_LIST_MESSAGE(C_CHAT_REQUEST_ROOM_LIST_MESSAGE&& from) noexcept
    : C_CHAT_REQUEST_ROOM_LIST_MESSAGE() {
    *this = ::std::move(from);
  }

  inline C_CHAT_REQUEST_ROOM_LIST_MESSAGE& operator=(const C_CHAT_REQUEST_ROOM_LIST_MESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT_REQUEST_ROOM_LIST_MESSAGE& operator=(C_CHAT_REQUEST_ROOM_LIST_MESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT_REQUEST_ROOM_LIST_MESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT_REQUEST_ROOM_LIST_MESSAGE* internal_default_instance() {
    return reinterpret_cast<const C_CHAT_REQUEST_ROOM_LIST_MESSAGE*>(
               &_C_CHAT_REQUEST_ROOM_LIST_MESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_CHAT_REQUEST_ROOM_LIST_MESSAGE& a, C_CHAT_REQUEST_ROOM_LIST_MESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT_REQUEST_ROOM_LIST_MESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT_REQUEST_ROOM_LIST_MESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT_REQUEST_ROOM_LIST_MESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT_REQUEST_ROOM_LIST_MESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_CHAT_REQUEST_ROOM_LIST_MESSAGE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_CHAT_REQUEST_ROOM_LIST_MESSAGE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT_REQUEST_ROOM_LIST_MESSAGE";
  }
  protected:
  explicit C_CHAT_REQUEST_ROOM_LIST_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT_REQUEST_ROOM_LIST_MESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT_RESPONSE_ROOM_LIST_MESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE) */ {
 public:
  inline S_CHAT_RESPONSE_ROOM_LIST_MESSAGE() : S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(nullptr) {}
  ~S_CHAT_RESPONSE_ROOM_LIST_MESSAGE() override;
  explicit constexpr S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from);
  S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE&& from) noexcept
    : S_CHAT_RESPONSE_ROOM_LIST_MESSAGE() {
    *this = ::std::move(from);
  }

  inline S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& operator=(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& operator=(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* internal_default_instance() {
    return reinterpret_cast<const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE*>(
               &_S_CHAT_RESPONSE_ROOM_LIST_MESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& a, S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT_RESPONSE_ROOM_LIST_MESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE";
  }
  protected:
  explicit S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameListFieldNumber = 1,
  };
  // repeated string roomNameList = 1;
  int roomnamelist_size() const;
  private:
  int _internal_roomnamelist_size() const;
  public:
  void clear_roomnamelist();
  const std::string& roomnamelist(int index) const;
  std::string* mutable_roomnamelist(int index);
  void set_roomnamelist(int index, const std::string& value);
  void set_roomnamelist(int index, std::string&& value);
  void set_roomnamelist(int index, const char* value);
  void set_roomnamelist(int index, const char* value, size_t size);
  std::string* add_roomnamelist();
  void add_roomnamelist(const std::string& value);
  void add_roomnamelist(std::string&& value);
  void add_roomnamelist(const char* value);
  void add_roomnamelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roomnamelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roomnamelist();
  private:
  const std::string& _internal_roomnamelist(int index) const;
  std::string* _internal_add_roomnamelist();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roomnamelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class C_CHATMESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHATMESSAGE) */ {
 public:
  inline C_CHATMESSAGE() : C_CHATMESSAGE(nullptr) {}
  ~C_CHATMESSAGE() override;
  explicit constexpr C_CHATMESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHATMESSAGE(const C_CHATMESSAGE& from);
  C_CHATMESSAGE(C_CHATMESSAGE&& from) noexcept
    : C_CHATMESSAGE() {
    *this = ::std::move(from);
  }

  inline C_CHATMESSAGE& operator=(const C_CHATMESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHATMESSAGE& operator=(C_CHATMESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHATMESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHATMESSAGE* internal_default_instance() {
    return reinterpret_cast<const C_CHATMESSAGE*>(
               &_C_CHATMESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_CHATMESSAGE& a, C_CHATMESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHATMESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHATMESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHATMESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHATMESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHATMESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHATMESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHATMESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHATMESSAGE";
  }
  protected:
  explicit C_CHATMESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHATMESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class S_CHATMESSAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHATMESSAGE) */ {
 public:
  inline S_CHATMESSAGE() : S_CHATMESSAGE(nullptr) {}
  ~S_CHATMESSAGE() override;
  explicit constexpr S_CHATMESSAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHATMESSAGE(const S_CHATMESSAGE& from);
  S_CHATMESSAGE(S_CHATMESSAGE&& from) noexcept
    : S_CHATMESSAGE() {
    *this = ::std::move(from);
  }

  inline S_CHATMESSAGE& operator=(const S_CHATMESSAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHATMESSAGE& operator=(S_CHATMESSAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHATMESSAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHATMESSAGE* internal_default_instance() {
    return reinterpret_cast<const S_CHATMESSAGE*>(
               &_S_CHATMESSAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_CHATMESSAGE& a, S_CHATMESSAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHATMESSAGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHATMESSAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHATMESSAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHATMESSAGE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHATMESSAGE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHATMESSAGE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHATMESSAGE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHATMESSAGE";
  }
  protected:
  explicit S_CHATMESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHATMESSAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_CHAT_CREATE_ROOM_MESSAGE

// string roomName = 1;
inline void C_CHAT_CREATE_ROOM_MESSAGE::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& C_CHAT_CREATE_ROOM_MESSAGE::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT_CREATE_ROOM_MESSAGE::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName)
}
inline std::string* C_CHAT_CREATE_ROOM_MESSAGE::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName)
  return _s;
}
inline const std::string& C_CHAT_CREATE_ROOM_MESSAGE::_internal_roomname() const {
  return roomname_.Get();
}
inline void C_CHAT_CREATE_ROOM_MESSAGE::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT_CREATE_ROOM_MESSAGE::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT_CREATE_ROOM_MESSAGE::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT_CREATE_ROOM_MESSAGE::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName)
}

// -------------------------------------------------------------------

// S_CHAT_CREATE_ROOM_RESULT_MESSAGE

// .Protocol.ChatCreateRoomResult chatCreateRoomResult = 1;
inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::clear_chatcreateroomresult() {
  chatcreateroomresult_ = 0;
}
inline ::Protocol::ChatCreateRoomResult S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_internal_chatcreateroomresult() const {
  return static_cast< ::Protocol::ChatCreateRoomResult >(chatcreateroomresult_);
}
inline ::Protocol::ChatCreateRoomResult S_CHAT_CREATE_ROOM_RESULT_MESSAGE::chatcreateroomresult() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.chatCreateRoomResult)
  return _internal_chatcreateroomresult();
}
inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_internal_set_chatcreateroomresult(::Protocol::ChatCreateRoomResult value) {
  
  chatcreateroomresult_ = value;
}
inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::set_chatcreateroomresult(::Protocol::ChatCreateRoomResult value) {
  _internal_set_chatcreateroomresult(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.chatCreateRoomResult)
}

// string roomName = 2;
inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& S_CHAT_CREATE_ROOM_RESULT_MESSAGE::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName)
}
inline std::string* S_CHAT_CREATE_ROOM_RESULT_MESSAGE::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName)
  return _s;
}
inline const std::string& S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_internal_roomname() const {
  return roomname_.Get();
}
inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT_CREATE_ROOM_RESULT_MESSAGE::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName)
}

// -------------------------------------------------------------------

// C_CHAT_JOIN_ROOM_MESSAGE

// string roomName = 1;
inline void C_CHAT_JOIN_ROOM_MESSAGE::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& C_CHAT_JOIN_ROOM_MESSAGE::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT_JOIN_ROOM_MESSAGE::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName)
}
inline std::string* C_CHAT_JOIN_ROOM_MESSAGE::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName)
  return _s;
}
inline const std::string& C_CHAT_JOIN_ROOM_MESSAGE::_internal_roomname() const {
  return roomname_.Get();
}
inline void C_CHAT_JOIN_ROOM_MESSAGE::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT_JOIN_ROOM_MESSAGE::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT_JOIN_ROOM_MESSAGE::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT_JOIN_ROOM_MESSAGE::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName)
}

// -------------------------------------------------------------------

// S_CHAT_JOIN_ROOM_RESULT_MESSAGE

// .Protocol.ChatJoinRoomResult chatJoinRoomResult = 1;
inline void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::clear_chatjoinroomresult() {
  chatjoinroomresult_ = 0;
}
inline ::Protocol::ChatJoinRoomResult S_CHAT_JOIN_ROOM_RESULT_MESSAGE::_internal_chatjoinroomresult() const {
  return static_cast< ::Protocol::ChatJoinRoomResult >(chatjoinroomresult_);
}
inline ::Protocol::ChatJoinRoomResult S_CHAT_JOIN_ROOM_RESULT_MESSAGE::chatjoinroomresult() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE.chatJoinRoomResult)
  return _internal_chatjoinroomresult();
}
inline void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::_internal_set_chatjoinroomresult(::Protocol::ChatJoinRoomResult value) {
  
  chatjoinroomresult_ = value;
}
inline void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::set_chatjoinroomresult(::Protocol::ChatJoinRoomResult value) {
  _internal_set_chatjoinroomresult(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE.chatJoinRoomResult)
}

// -------------------------------------------------------------------

// C_CHAT_REQUEST_ROOM_LIST_MESSAGE

// -------------------------------------------------------------------

// S_CHAT_RESPONSE_ROOM_LIST_MESSAGE

// repeated string roomNameList = 1;
inline int S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_internal_roomnamelist_size() const {
  return roomnamelist_.size();
}
inline int S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::roomnamelist_size() const {
  return _internal_roomnamelist_size();
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::clear_roomnamelist() {
  roomnamelist_.Clear();
}
inline std::string* S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::add_roomnamelist() {
  std::string* _s = _internal_add_roomnamelist();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
  return _s;
}
inline const std::string& S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_internal_roomnamelist(int index) const {
  return roomnamelist_.Get(index);
}
inline const std::string& S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::roomnamelist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
  return _internal_roomnamelist(index);
}
inline std::string* S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::mutable_roomnamelist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
  return roomnamelist_.Mutable(index);
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::set_roomnamelist(int index, const std::string& value) {
  roomnamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::set_roomnamelist(int index, std::string&& value) {
  roomnamelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::set_roomnamelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roomnamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::set_roomnamelist(int index, const char* value, size_t size) {
  roomnamelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline std::string* S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_internal_add_roomnamelist() {
  return roomnamelist_.Add();
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::add_roomnamelist(const std::string& value) {
  roomnamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::add_roomnamelist(std::string&& value) {
  roomnamelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::add_roomnamelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roomnamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::add_roomnamelist(const char* value, size_t size) {
  roomnamelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::roomnamelist() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
  return roomnamelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::mutable_roomnamelist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList)
  return &roomnamelist_;
}

// -------------------------------------------------------------------

// C_CHATMESSAGE

// string msg = 1;
inline void C_CHATMESSAGE::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_CHATMESSAGE::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHATMESSAGE.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHATMESSAGE::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHATMESSAGE.msg)
}
inline std::string* C_CHATMESSAGE::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHATMESSAGE.msg)
  return _s;
}
inline const std::string& C_CHATMESSAGE::_internal_msg() const {
  return msg_.Get();
}
inline void C_CHATMESSAGE::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHATMESSAGE::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHATMESSAGE::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHATMESSAGE.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHATMESSAGE::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHATMESSAGE.msg)
}

// -------------------------------------------------------------------

// S_CHATMESSAGE

// string name = 1;
inline void S_CHATMESSAGE::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& S_CHATMESSAGE::name() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHATMESSAGE.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHATMESSAGE::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHATMESSAGE.name)
}
inline std::string* S_CHATMESSAGE::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHATMESSAGE.name)
  return _s;
}
inline const std::string& S_CHATMESSAGE::_internal_name() const {
  return name_.Get();
}
inline void S_CHATMESSAGE::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHATMESSAGE::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHATMESSAGE::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHATMESSAGE.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHATMESSAGE::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHATMESSAGE.name)
}

// string msg = 2;
inline void S_CHATMESSAGE::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_CHATMESSAGE::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHATMESSAGE.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHATMESSAGE::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHATMESSAGE.msg)
}
inline std::string* S_CHATMESSAGE::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHATMESSAGE.msg)
  return _s;
}
inline const std::string& S_CHATMESSAGE::_internal_msg() const {
  return msg_.Get();
}
inline void S_CHATMESSAGE::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHATMESSAGE::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHATMESSAGE::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHATMESSAGE.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHATMESSAGE::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHATMESSAGE.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ChatCreateRoomResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ChatCreateRoomResult>() {
  return ::Protocol::ChatCreateRoomResult_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ChatJoinRoomResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ChatJoinRoomResult>() {
  return ::Protocol::ChatJoinRoomResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
