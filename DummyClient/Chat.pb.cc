// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr C_CHAT_CREATE_ROOM_MESSAGE::C_CHAT_CREATE_ROOM_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CHAT_CREATE_ROOM_MESSAGEDefaultTypeInternal {
  constexpr C_CHAT_CREATE_ROOM_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHAT_CREATE_ROOM_MESSAGEDefaultTypeInternal() {}
  union {
    C_CHAT_CREATE_ROOM_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHAT_CREATE_ROOM_MESSAGEDefaultTypeInternal _C_CHAT_CREATE_ROOM_MESSAGE_default_instance_;
constexpr S_CHAT_CREATE_ROOM_RESULT_MESSAGE::S_CHAT_CREATE_ROOM_RESULT_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chatcreateroomresult_(0)
{}
struct S_CHAT_CREATE_ROOM_RESULT_MESSAGEDefaultTypeInternal {
  constexpr S_CHAT_CREATE_ROOM_RESULT_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHAT_CREATE_ROOM_RESULT_MESSAGEDefaultTypeInternal() {}
  union {
    S_CHAT_CREATE_ROOM_RESULT_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHAT_CREATE_ROOM_RESULT_MESSAGEDefaultTypeInternal _S_CHAT_CREATE_ROOM_RESULT_MESSAGE_default_instance_;
constexpr C_CHAT_JOIN_ROOM_MESSAGE::C_CHAT_JOIN_ROOM_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CHAT_JOIN_ROOM_MESSAGEDefaultTypeInternal {
  constexpr C_CHAT_JOIN_ROOM_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHAT_JOIN_ROOM_MESSAGEDefaultTypeInternal() {}
  union {
    C_CHAT_JOIN_ROOM_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHAT_JOIN_ROOM_MESSAGEDefaultTypeInternal _C_CHAT_JOIN_ROOM_MESSAGE_default_instance_;
constexpr S_CHAT_JOIN_ROOM_RESULT_MESSAGE::S_CHAT_JOIN_ROOM_RESULT_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatjoinroomresult_(0)
{}
struct S_CHAT_JOIN_ROOM_RESULT_MESSAGEDefaultTypeInternal {
  constexpr S_CHAT_JOIN_ROOM_RESULT_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHAT_JOIN_ROOM_RESULT_MESSAGEDefaultTypeInternal() {}
  union {
    S_CHAT_JOIN_ROOM_RESULT_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHAT_JOIN_ROOM_RESULT_MESSAGEDefaultTypeInternal _S_CHAT_JOIN_ROOM_RESULT_MESSAGE_default_instance_;
constexpr C_CHAT_REQUEST_ROOM_LIST_MESSAGE::C_CHAT_REQUEST_ROOM_LIST_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_CHAT_REQUEST_ROOM_LIST_MESSAGEDefaultTypeInternal {
  constexpr C_CHAT_REQUEST_ROOM_LIST_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHAT_REQUEST_ROOM_LIST_MESSAGEDefaultTypeInternal() {}
  union {
    C_CHAT_REQUEST_ROOM_LIST_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHAT_REQUEST_ROOM_LIST_MESSAGEDefaultTypeInternal _C_CHAT_REQUEST_ROOM_LIST_MESSAGE_default_instance_;
constexpr S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomnamelist_(){}
struct S_CHAT_RESPONSE_ROOM_LIST_MESSAGEDefaultTypeInternal {
  constexpr S_CHAT_RESPONSE_ROOM_LIST_MESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHAT_RESPONSE_ROOM_LIST_MESSAGEDefaultTypeInternal() {}
  union {
    S_CHAT_RESPONSE_ROOM_LIST_MESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHAT_RESPONSE_ROOM_LIST_MESSAGEDefaultTypeInternal _S_CHAT_RESPONSE_ROOM_LIST_MESSAGE_default_instance_;
constexpr C_CHATMESSAGE::C_CHATMESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CHATMESSAGEDefaultTypeInternal {
  constexpr C_CHATMESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHATMESSAGEDefaultTypeInternal() {}
  union {
    C_CHATMESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHATMESSAGEDefaultTypeInternal _C_CHATMESSAGE_default_instance_;
constexpr S_CHATMESSAGE::S_CHATMESSAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct S_CHATMESSAGEDefaultTypeInternal {
  constexpr S_CHATMESSAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHATMESSAGEDefaultTypeInternal() {}
  union {
    S_CHATMESSAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHATMESSAGEDefaultTypeInternal _S_CHATMESSAGE_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Chat_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Chat_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Chat_2eproto = nullptr;

const uint32_t TableStruct_Chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT_CREATE_ROOM_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT_CREATE_ROOM_MESSAGE, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE, chatcreateroomresult_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT_JOIN_ROOM_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT_JOIN_ROOM_MESSAGE, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE, chatjoinroomresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE, roomnamelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHATMESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHATMESSAGE, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHATMESSAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHATMESSAGE, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHATMESSAGE, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_CHAT_CREATE_ROOM_MESSAGE)},
  { 7, -1, -1, sizeof(::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE)},
  { 15, -1, -1, sizeof(::Protocol::C_CHAT_JOIN_ROOM_MESSAGE)},
  { 22, -1, -1, sizeof(::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE)},
  { 29, -1, -1, sizeof(::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE)},
  { 35, -1, -1, sizeof(::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)},
  { 42, -1, -1, sizeof(::Protocol::C_CHATMESSAGE)},
  { 49, -1, -1, sizeof(::Protocol::S_CHATMESSAGE)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CHAT_CREATE_ROOM_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHAT_CREATE_ROOM_RESULT_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CHAT_JOIN_ROOM_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHAT_JOIN_ROOM_RESULT_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CHAT_REQUEST_ROOM_LIST_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHAT_RESPONSE_ROOM_LIST_MESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CHATMESSAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHATMESSAGE_default_instance_),
};

const char descriptor_table_protodef_Chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nChat.proto\022\010Protocol\".\n\032C_CHAT_CREATE_"
  "ROOM_MESSAGE\022\020\n\010roomName\030\001 \001(\t\"s\n!S_CHAT"
  "_CREATE_ROOM_RESULT_MESSAGE\022<\n\024chatCreat"
  "eRoomResult\030\001 \001(\0162\036.Protocol.ChatCreateR"
  "oomResult\022\020\n\010roomName\030\002 \001(\t\",\n\030C_CHAT_JO"
  "IN_ROOM_MESSAGE\022\020\n\010roomName\030\001 \001(\t\"[\n\037S_C"
  "HAT_JOIN_ROOM_RESULT_MESSAGE\0228\n\022chatJoin"
  "RoomResult\030\001 \001(\0162\034.Protocol.ChatJoinRoom"
  "Result\"\"\n C_CHAT_REQUEST_ROOM_LIST_MESSA"
  "GE\"9\n!S_CHAT_RESPONSE_ROOM_LIST_MESSAGE\022"
  "\024\n\014roomNameList\030\001 \003(\t\"\034\n\rC_CHATMESSAGE\022\013"
  "\n\003msg\030\001 \001(\t\"*\n\rS_CHATMESSAGE\022\014\n\004name\030\001 \001"
  "(\t\022\013\n\003msg\030\002 \001(\t*s\n\024ChatCreateRoomResult\022"
  " \n\034ChatCreateRoomResult_Success\020\000\0229\n5Cha"
  "tCreateRoomResult_Fail_Already_Exist_Nam"
  "e_In_Rooms\020\001*c\n\022ChatJoinRoomResult\022\036\n\032Ch"
  "atJoinRoomResult_Success\020\000\022-\n)ChatJoinRo"
  "omResult_Fail_Is_Not_Exist_Room\020\001b\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Chat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto = {
  false, false, 721, descriptor_table_protodef_Chat_2eproto, "Chat.proto", 
  &descriptor_table_Chat_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_Chat_2eproto::offsets,
  file_level_metadata_Chat_2eproto, file_level_enum_descriptors_Chat_2eproto, file_level_service_descriptors_Chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Chat_2eproto_getter() {
  return &descriptor_table_Chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Chat_2eproto(&descriptor_table_Chat_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatCreateRoomResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chat_2eproto);
  return file_level_enum_descriptors_Chat_2eproto[0];
}
bool ChatCreateRoomResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatJoinRoomResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chat_2eproto);
  return file_level_enum_descriptors_Chat_2eproto[1];
}
bool ChatJoinRoomResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class C_CHAT_CREATE_ROOM_MESSAGE::_Internal {
 public:
};

C_CHAT_CREATE_ROOM_MESSAGE::C_CHAT_CREATE_ROOM_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
}
C_CHAT_CREATE_ROOM_MESSAGE::C_CHAT_CREATE_ROOM_MESSAGE(const C_CHAT_CREATE_ROOM_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
}

inline void C_CHAT_CREATE_ROOM_MESSAGE::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT_CREATE_ROOM_MESSAGE::~C_CHAT_CREATE_ROOM_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CHAT_CREATE_ROOM_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CHAT_CREATE_ROOM_MESSAGE::ArenaDtor(void* object) {
  C_CHAT_CREATE_ROOM_MESSAGE* _this = reinterpret_cast< C_CHAT_CREATE_ROOM_MESSAGE* >(object);
  (void)_this;
}
void C_CHAT_CREATE_ROOM_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CHAT_CREATE_ROOM_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHAT_CREATE_ROOM_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT_CREATE_ROOM_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT_CREATE_ROOM_MESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT_CREATE_ROOM_MESSAGE.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  return target;
}

size_t C_CHAT_CREATE_ROOM_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT_CREATE_ROOM_MESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHAT_CREATE_ROOM_MESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT_CREATE_ROOM_MESSAGE::GetClassData() const { return &_class_data_; }

void C_CHAT_CREATE_ROOM_MESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHAT_CREATE_ROOM_MESSAGE *>(to)->MergeFrom(
      static_cast<const C_CHAT_CREATE_ROOM_MESSAGE &>(from));
}


void C_CHAT_CREATE_ROOM_MESSAGE::MergeFrom(const C_CHAT_CREATE_ROOM_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT_CREATE_ROOM_MESSAGE::CopyFrom(const C_CHAT_CREATE_ROOM_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT_CREATE_ROOM_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT_CREATE_ROOM_MESSAGE::IsInitialized() const {
  return true;
}

void C_CHAT_CREATE_ROOM_MESSAGE::InternalSwap(C_CHAT_CREATE_ROOM_MESSAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, lhs_arena,
      &other->roomname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT_CREATE_ROOM_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[0]);
}

// ===================================================================

class S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_Internal {
 public:
};

S_CHAT_CREATE_ROOM_RESULT_MESSAGE::S_CHAT_CREATE_ROOM_RESULT_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
}
S_CHAT_CREATE_ROOM_RESULT_MESSAGE::S_CHAT_CREATE_ROOM_RESULT_MESSAGE(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  chatcreateroomresult_ = from.chatcreateroomresult_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
}

inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chatcreateroomresult_ = 0;
}

S_CHAT_CREATE_ROOM_RESULT_MESSAGE::~S_CHAT_CREATE_ROOM_RESULT_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::ArenaDtor(void* object) {
  S_CHAT_CREATE_ROOM_RESULT_MESSAGE* _this = reinterpret_cast< S_CHAT_CREATE_ROOM_RESULT_MESSAGE* >(object);
  (void)_this;
}
void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  chatcreateroomresult_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ChatCreateRoomResult chatCreateRoomResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chatcreateroomresult(static_cast<::Protocol::ChatCreateRoomResult>(val));
        } else
          goto handle_unusual;
        continue;
      // string roomName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ChatCreateRoomResult chatCreateRoomResult = 1;
  if (this->_internal_chatcreateroomresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chatcreateroomresult(), target);
  }

  // string roomName = 2;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE.roomName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  return target;
}

size_t S_CHAT_CREATE_ROOM_RESULT_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 2;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // .Protocol.ChatCreateRoomResult chatCreateRoomResult = 1;
  if (this->_internal_chatcreateroomresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chatcreateroomresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT_CREATE_ROOM_RESULT_MESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHAT_CREATE_ROOM_RESULT_MESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT_CREATE_ROOM_RESULT_MESSAGE::GetClassData() const { return &_class_data_; }

void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHAT_CREATE_ROOM_RESULT_MESSAGE *>(to)->MergeFrom(
      static_cast<const S_CHAT_CREATE_ROOM_RESULT_MESSAGE &>(from));
}


void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::MergeFrom(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from._internal_chatcreateroomresult() != 0) {
    _internal_set_chatcreateroomresult(from._internal_chatcreateroomresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::CopyFrom(const S_CHAT_CREATE_ROOM_RESULT_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT_CREATE_ROOM_RESULT_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT_CREATE_ROOM_RESULT_MESSAGE::IsInitialized() const {
  return true;
}

void S_CHAT_CREATE_ROOM_RESULT_MESSAGE::InternalSwap(S_CHAT_CREATE_ROOM_RESULT_MESSAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, lhs_arena,
      &other->roomname_, rhs_arena
  );
  swap(chatcreateroomresult_, other->chatcreateroomresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT_CREATE_ROOM_RESULT_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[1]);
}

// ===================================================================

class C_CHAT_JOIN_ROOM_MESSAGE::_Internal {
 public:
};

C_CHAT_JOIN_ROOM_MESSAGE::C_CHAT_JOIN_ROOM_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
}
C_CHAT_JOIN_ROOM_MESSAGE::C_CHAT_JOIN_ROOM_MESSAGE(const C_CHAT_JOIN_ROOM_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
}

inline void C_CHAT_JOIN_ROOM_MESSAGE::SharedCtor() {
roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT_JOIN_ROOM_MESSAGE::~C_CHAT_JOIN_ROOM_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CHAT_JOIN_ROOM_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CHAT_JOIN_ROOM_MESSAGE::ArenaDtor(void* object) {
  C_CHAT_JOIN_ROOM_MESSAGE* _this = reinterpret_cast< C_CHAT_JOIN_ROOM_MESSAGE* >(object);
  (void)_this;
}
void C_CHAT_JOIN_ROOM_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CHAT_JOIN_ROOM_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHAT_JOIN_ROOM_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT_JOIN_ROOM_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT_JOIN_ROOM_MESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT_JOIN_ROOM_MESSAGE.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  return target;
}

size_t C_CHAT_JOIN_ROOM_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT_JOIN_ROOM_MESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHAT_JOIN_ROOM_MESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT_JOIN_ROOM_MESSAGE::GetClassData() const { return &_class_data_; }

void C_CHAT_JOIN_ROOM_MESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHAT_JOIN_ROOM_MESSAGE *>(to)->MergeFrom(
      static_cast<const C_CHAT_JOIN_ROOM_MESSAGE &>(from));
}


void C_CHAT_JOIN_ROOM_MESSAGE::MergeFrom(const C_CHAT_JOIN_ROOM_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT_JOIN_ROOM_MESSAGE::CopyFrom(const C_CHAT_JOIN_ROOM_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT_JOIN_ROOM_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT_JOIN_ROOM_MESSAGE::IsInitialized() const {
  return true;
}

void C_CHAT_JOIN_ROOM_MESSAGE::InternalSwap(C_CHAT_JOIN_ROOM_MESSAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomname_, lhs_arena,
      &other->roomname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT_JOIN_ROOM_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[2]);
}

// ===================================================================

class S_CHAT_JOIN_ROOM_RESULT_MESSAGE::_Internal {
 public:
};

S_CHAT_JOIN_ROOM_RESULT_MESSAGE::S_CHAT_JOIN_ROOM_RESULT_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
}
S_CHAT_JOIN_ROOM_RESULT_MESSAGE::S_CHAT_JOIN_ROOM_RESULT_MESSAGE(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatjoinroomresult_ = from.chatjoinroomresult_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
}

inline void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::SharedCtor() {
chatjoinroomresult_ = 0;
}

S_CHAT_JOIN_ROOM_RESULT_MESSAGE::~S_CHAT_JOIN_ROOM_RESULT_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::ArenaDtor(void* object) {
  S_CHAT_JOIN_ROOM_RESULT_MESSAGE* _this = reinterpret_cast< S_CHAT_JOIN_ROOM_RESULT_MESSAGE* >(object);
  (void)_this;
}
void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatjoinroomresult_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT_JOIN_ROOM_RESULT_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ChatJoinRoomResult chatJoinRoomResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chatjoinroomresult(static_cast<::Protocol::ChatJoinRoomResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT_JOIN_ROOM_RESULT_MESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ChatJoinRoomResult chatJoinRoomResult = 1;
  if (this->_internal_chatjoinroomresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chatjoinroomresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  return target;
}

size_t S_CHAT_JOIN_ROOM_RESULT_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ChatJoinRoomResult chatJoinRoomResult = 1;
  if (this->_internal_chatjoinroomresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chatjoinroomresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT_JOIN_ROOM_RESULT_MESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHAT_JOIN_ROOM_RESULT_MESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT_JOIN_ROOM_RESULT_MESSAGE::GetClassData() const { return &_class_data_; }

void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHAT_JOIN_ROOM_RESULT_MESSAGE *>(to)->MergeFrom(
      static_cast<const S_CHAT_JOIN_ROOM_RESULT_MESSAGE &>(from));
}


void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::MergeFrom(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_chatjoinroomresult() != 0) {
    _internal_set_chatjoinroomresult(from._internal_chatjoinroomresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::CopyFrom(const S_CHAT_JOIN_ROOM_RESULT_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT_JOIN_ROOM_RESULT_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT_JOIN_ROOM_RESULT_MESSAGE::IsInitialized() const {
  return true;
}

void S_CHAT_JOIN_ROOM_RESULT_MESSAGE::InternalSwap(S_CHAT_JOIN_ROOM_RESULT_MESSAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(chatjoinroomresult_, other->chatjoinroomresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT_JOIN_ROOM_RESULT_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[3]);
}

// ===================================================================

class C_CHAT_REQUEST_ROOM_LIST_MESSAGE::_Internal {
 public:
};

C_CHAT_REQUEST_ROOM_LIST_MESSAGE::C_CHAT_REQUEST_ROOM_LIST_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT_REQUEST_ROOM_LIST_MESSAGE)
}
C_CHAT_REQUEST_ROOM_LIST_MESSAGE::C_CHAT_REQUEST_ROOM_LIST_MESSAGE(const C_CHAT_REQUEST_ROOM_LIST_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT_REQUEST_ROOM_LIST_MESSAGE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT_REQUEST_ROOM_LIST_MESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT_REQUEST_ROOM_LIST_MESSAGE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT_REQUEST_ROOM_LIST_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[4]);
}

// ===================================================================

class S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_Internal {
 public:
};

S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roomnamelist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
}
S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roomnamelist_(from.roomnamelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
}

inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::SharedCtor() {
}

S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::~S_CHAT_RESPONSE_ROOM_LIST_MESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::ArenaDtor(void* object) {
  S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* _this = reinterpret_cast< S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* >(object);
  (void)_this;
}
void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomnamelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string roomNameList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roomnamelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string roomNameList = 1;
  for (int i = 0, n = this->_internal_roomnamelist_size(); i < n; i++) {
    const auto& s = this->_internal_roomnamelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE.roomNameList");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  return target;
}

size_t S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roomNameList = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roomnamelist_.size());
  for (int i = 0, n = roomnamelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roomnamelist_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::GetClassData() const { return &_class_data_; }

void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHAT_RESPONSE_ROOM_LIST_MESSAGE *>(to)->MergeFrom(
      static_cast<const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE &>(from));
}


void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::MergeFrom(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roomnamelist_.MergeFrom(from.roomnamelist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::CopyFrom(const S_CHAT_RESPONSE_ROOM_LIST_MESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT_RESPONSE_ROOM_LIST_MESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::IsInitialized() const {
  return true;
}

void S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::InternalSwap(S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roomnamelist_.InternalSwap(&other->roomnamelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT_RESPONSE_ROOM_LIST_MESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[5]);
}

// ===================================================================

class C_CHATMESSAGE::_Internal {
 public:
};

C_CHATMESSAGE::C_CHATMESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHATMESSAGE)
}
C_CHATMESSAGE::C_CHATMESSAGE(const C_CHATMESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHATMESSAGE)
}

inline void C_CHATMESSAGE::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHATMESSAGE::~C_CHATMESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHATMESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CHATMESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CHATMESSAGE::ArenaDtor(void* object) {
  C_CHATMESSAGE* _this = reinterpret_cast< C_CHATMESSAGE* >(object);
  (void)_this;
}
void C_CHATMESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CHATMESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHATMESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHATMESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHATMESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CHATMESSAGE.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHATMESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHATMESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHATMESSAGE.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHATMESSAGE)
  return target;
}

size_t C_CHATMESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHATMESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHATMESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHATMESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHATMESSAGE::GetClassData() const { return &_class_data_; }

void C_CHATMESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHATMESSAGE *>(to)->MergeFrom(
      static_cast<const C_CHATMESSAGE &>(from));
}


void C_CHATMESSAGE::MergeFrom(const C_CHATMESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHATMESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHATMESSAGE::CopyFrom(const C_CHATMESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHATMESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHATMESSAGE::IsInitialized() const {
  return true;
}

void C_CHATMESSAGE::InternalSwap(C_CHATMESSAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHATMESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[6]);
}

// ===================================================================

class S_CHATMESSAGE::_Internal {
 public:
};

S_CHATMESSAGE::S_CHATMESSAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHATMESSAGE)
}
S_CHATMESSAGE::S_CHATMESSAGE(const S_CHATMESSAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHATMESSAGE)
}

inline void S_CHATMESSAGE::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHATMESSAGE::~S_CHATMESSAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHATMESSAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHATMESSAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHATMESSAGE::ArenaDtor(void* object) {
  S_CHATMESSAGE* _this = reinterpret_cast< S_CHATMESSAGE* >(object);
  (void)_this;
}
void S_CHATMESSAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHATMESSAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHATMESSAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHATMESSAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHATMESSAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHATMESSAGE.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHATMESSAGE.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHATMESSAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHATMESSAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHATMESSAGE.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHATMESSAGE.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHATMESSAGE)
  return target;
}

size_t S_CHATMESSAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHATMESSAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHATMESSAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHATMESSAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHATMESSAGE::GetClassData() const { return &_class_data_; }

void S_CHATMESSAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHATMESSAGE *>(to)->MergeFrom(
      static_cast<const S_CHATMESSAGE &>(from));
}


void S_CHATMESSAGE::MergeFrom(const S_CHATMESSAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHATMESSAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHATMESSAGE::CopyFrom(const S_CHATMESSAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHATMESSAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHATMESSAGE::IsInitialized() const {
  return true;
}

void S_CHATMESSAGE::InternalSwap(S_CHATMESSAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHATMESSAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT_CREATE_ROOM_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::C_CHAT_CREATE_ROOM_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT_CREATE_ROOM_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT_CREATE_ROOM_RESULT_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT_JOIN_ROOM_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::C_CHAT_JOIN_ROOM_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT_JOIN_ROOM_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT_JOIN_ROOM_RESULT_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT_REQUEST_ROOM_LIST_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE* Arena::CreateMaybeMessage< ::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT_RESPONSE_ROOM_LIST_MESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHATMESSAGE* Arena::CreateMaybeMessage< ::Protocol::C_CHATMESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHATMESSAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHATMESSAGE* Arena::CreateMaybeMessage< ::Protocol::S_CHATMESSAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHATMESSAGE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
